# Import necessary libraries
import streamlit as st
import pandas as pd
import numpy as np
import pickle


# Load the pre-trained model with dtype compatibility
with open("D:/breast cancer/cancerPredictor.pkl", 'rb') as file:
    loading_model = pickle.load(file, fix_imports=False)

def breast_cancer_prediction(input_data):
    input_np_array = np.asarray(input_data, dtype=float)  # Convert input to float
    input_reshaped = input_np_array.reshape(1, -1)

    prediction = loading_model.predict(input_reshaped)

    if prediction[0] == 0:
        return "Benign"
    else:
        return "Malignant"

def main():
    st.title('Breast Cancer Prediction App')

    # Get user input for each feature
    diagnosis = st.text_input('diagnosis')
    radius_mean = st.text_input('Mean Radius')
    texture_mean = st.text_input('Texture Mean')
    perimeter_mean = st.text_input('Perimeter Mean')
    area_mean = st.text_input('Area Mean')
    smoothness_mean = st.text_input('Smoothness Mean')
    compactness_mean = st.text_input('Compactness Mean')
    concavity_mean = st.text_input('Concavity Mean')
    concave_points_mean = st.text_input('Concave Points Mean')
    symmetry_mean = st.text_input('Symmetry Mean')
    radius_se = st.text_input('Radius SE')
    perimeter_se = st.text_input('Perimeter SE')
    area_se = st.text_input('Area SE')
    compactness_se = st.text_input('Compactness SE')
    concavity_se = st.text_input('Concavity SE')
    concave_points_se = st.text_input('Concave Points SE')
    fractal_dimension_se = st.text_input('Fractal Dimension SE')
    radius_worst = st.text_input('Radius Worst')
    texture_worst = st.text_input('Texture Worst')
    perimeter_worst = st.text_input('Perimeter Worst')
    area_worst = st.text_input('Area Worst')
    smoothness_worst = st.text_input('Smoothness Worst')
    compactness_worst = st.text_input('Compactness Worst')
    concavity_worst = st.text_input('Concavity Worst')
    concave_points_worst = st.text_input('Concave Points Worst')
    symmetry_worst = st.text_input('Symmetry Worst')
    fractal_dimension_worst = st.text_input('Fractal Dimension Worst')
    

    # Make predictions and display the result
    if st.button("Predict"):
        # Validate input values
        if any(value == '' for value in [diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean,
                                         compactness_mean, concavity_mean, concave_points_mean, symmetry_mean,
                                         radius_se, perimeter_se, area_se, compactness_se,
                                         concavity_se, concave_points_se, fractal_dimension_se,
                                         radius_worst, texture_worst, perimeter_worst, area_worst, smoothness_worst,
                                         compactness_worst, concavity_worst, concave_points_worst, symmetry_worst,
                                         fractal_dimension_worst]):
            st.warning("Please enter values for all input features.")
        else:
            # Perform prediction
            prediction_result = breast_cancer_prediction([
                str(diagnosis), float(radius_mean), float(texture_mean), float(perimeter_mean), float(area_mean),
                float(smoothness_mean), float(compactness_mean), float(concavity_mean),
                float(concave_points_mean), float(symmetry_mean), float(radius_se),
                float(perimeter_se), float(area_se),
                float(concavity_se), float(concave_points_se),
                float(fractal_dimension_se), float(radius_worst), float(texture_worst),
                float(perimeter_worst), float(area_worst), float(smoothness_worst),
                float(compactness_worst), float(concavity_worst),
                float(concave_points_worst), float(symmetry_worst),
                float(fractal_dimension_worst)
            ])
            st.subheader("Prediction:")
            st.write(prediction_result)

if _name_ == '_main_':
    main()
